<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper 为根元素节点， 一个namespace对应一个dao -->
<!--
Mapper元素只有一个属性namespace，它有两个作用：
    `一是用于区分不同的mapper`（在不同的mapper文件里，子元素的id可以相同，mybatis通过namespace和子元素的id联合区分），
    `二是与接口关联`（应用程序通过接口访问mybatis时，mybatis通过接口的完整名称查找对应的mapper配置，因此namespace的命名务必小心一定要某接口同名）。
-->
<mapper namespace="com.xl.mapper.RoleMapper">

    <!--
    cache- 配置本定命名空间的缓存。
       type- cache实现类，默认为PERPETUAL，可以使用自定义的cache实现类（别名或完整类名皆可）
       eviction- 回收算法，默认为LRU，可选的算法有：
           LRU– 最近最少使用的：移除最长时间不被使用的对象。
           FIFO– 先进先出：按对象进入缓存的顺序来移除它们。
           SOFT– 软引用：移除基于垃圾回收器状态和软引用规则的对象。
           WEAK– 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
       flushInterval- 刷新间隔，默认为1个小时，单位毫秒
       size- 缓存大小，默认大小1024，单位为引用数
       readOnly- 只读
    -->
    <cache type="PERPETUAL" eviction="LRU" flushInterval="60000"
           size="1024" readOnly="true" />

    <!--
    cache-ref–从其他命名空间引用缓存配置。
    如果你不想定义自己的cache，可以使用cache-ref引用别的cache。
    因为每个cache都以namespace为id，所以cache-ref只需要配置一个namespace属性就可以了。
    需要注意的是，如果cache-ref和cache都配置了，以cache为准。
    <cache-ref namespace="com.someone.application.data.SomeMapper"/>
    -->

    <resultMap type="role" id="roleMap">
        <id column="id" property="id" javaType="long" jdbcType="BIGINT" />
        <result column="role_name" property="roleName" javaType="string"
                jdbcType="VARCHAR" />
        <result column="note" property="note"
                typeHandler="com.xl.handler.MyStringHandler" />
    </resultMap>

    <select id="getRole" parameterType="long" resultMap="roleMap" useCache="true">
        select id,role_name as roleName,note from role where id=#{id}
    </select>

    <select id="findRole" parameterType="long" resultMap="roleMap">
        select
            id,role_name,note from role
        where role_name like
            CONCAT('%',#{roleName javaType=string, jdbcType=VARCHAR,typeHandler=com.xl.handler.MyStringHandler},'%')r
    </select>

    <insert id="insertRole" parameterType="role">
        insert into role(role_name,note) value(#{roleName},#{note})
    </insert>

    <delete id="deleteRole" parameterType="long">
        delete from role where id=#{id}
    </delete>

</mapper>